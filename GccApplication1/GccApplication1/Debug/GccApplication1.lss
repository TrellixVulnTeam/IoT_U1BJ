
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000715  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a9  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC &= 0x00;
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	14 ba       	out	0x14, r1	; 20
	DDRB |= 0xff;
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	87 bb       	out	0x17, r24	; 23
					PORTB &= (0<<i);
					_delay_ms(20);
				}
				else
				{
					PORTB |= (1<<i);
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	70 e0       	ldi	r23, 0x00	; 0
    while (1) 
    {
		uint8_t timestamp = 0;
		timestamp = PINC & 0x01;
		
		if(timestamp == 0x01)
  7a:	98 9b       	sbis	0x13, 0	; 19
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(int i=0; i<8; i++)
			{
				if(i<7)
  82:	87 30       	cpi	r24, 0x07	; 7
  84:	91 05       	cpc	r25, r1
  86:	e4 f4       	brge	.+56     	; 0xc0 <main+0x54>
				{
					PORTB |= (1<<i);
  88:	48 b3       	in	r20, 0x18	; 24
  8a:	9b 01       	movw	r18, r22
  8c:	08 2e       	mov	r0, r24
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	24 2b       	or	r18, r20
  9a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	3a e1       	ldi	r19, 0x1A	; 26
  a0:	46 e0       	ldi	r20, 0x06	; 6
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	40 40       	sbci	r20, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
					_delay_ms(250);
					
					PORTB &= (0<<i);
  ae:	28 b3       	in	r18, 0x18	; 24
  b0:	18 ba       	out	0x18, r1	; 24
  b2:	ef e3       	ldi	r30, 0x3F	; 63
  b4:	fc e9       	ldi	r31, 0x9C	; 156
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
  be:	35 c0       	rjmp	.+106    	; 0x12a <main+0xbe>
					_delay_ms(20);
				}
				else
				{
					PORTB |= (1<<i);
  c0:	48 b3       	in	r20, 0x18	; 24
  c2:	9b 01       	movw	r18, r22
  c4:	08 2e       	mov	r0, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x60>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <main+0x5c>
  d0:	24 2b       	or	r18, r20
  d2:	28 bb       	out	0x18, r18	; 24
  d4:	ff e7       	ldi	r31, 0x7F	; 127
  d6:	2a e1       	ldi	r18, 0x1A	; 26
  d8:	36 e0       	ldi	r19, 0x06	; 6
  da:	f1 50       	subi	r31, 0x01	; 1
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
					_delay_ms(250);
					
					for(int j=7; j>0; j--)
  e6:	27 e0       	ldi	r18, 0x07	; 7
  e8:	30 e0       	ldi	r19, 0x00	; 0
					{
						PORTB &= (0<<j);
  ea:	48 b3       	in	r20, 0x18	; 24
  ec:	18 ba       	out	0x18, r1	; 24
  ee:	ef e3       	ldi	r30, 0x3F	; 63
  f0:	fc e9       	ldi	r31, 0x9C	; 156
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x86>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
						_delay_ms(20);
						
						PORTB |= (1<<j-1);
  fa:	e8 b3       	in	r30, 0x18	; 24
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	31 09       	sbc	r19, r1
 100:	ab 01       	movw	r20, r22
 102:	02 2e       	mov	r0, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x9e>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <main+0x9a>
 10e:	4e 2b       	or	r20, r30
 110:	48 bb       	out	0x18, r20	; 24
 112:	ff e7       	ldi	r31, 0x7F	; 127
 114:	4a e1       	ldi	r20, 0x1A	; 26
 116:	56 e0       	ldi	r21, 0x06	; 6
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	40 40       	sbci	r20, 0x00	; 0
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0xac>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xb6>
 122:	00 00       	nop
				else
				{
					PORTB |= (1<<i);
					_delay_ms(250);
					
					for(int j=7; j>0; j--)
 124:	21 15       	cp	r18, r1
 126:	31 05       	cpc	r19, r1
 128:	01 f7       	brne	.-64     	; 0xea <main+0x7e>
		uint8_t timestamp = 0;
		timestamp = PINC & 0x01;
		
		if(timestamp == 0x01)
		{
			for(int i=0; i<8; i++)
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	09 f0       	breq	.+2      	; 0x134 <main+0xc8>
 132:	a7 cf       	rjmp	.-178    	; 0x82 <main+0x16>
 134:	a2 cf       	rjmp	.-188    	; 0x7a <main+0xe>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
