
Blinking7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a6  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000353  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	uint8_t segment[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0xFF, 0x6F};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
    DDRB |= 0x07;
  a8:	87 b3       	in	r24, 0x17	; 23
  aa:	87 60       	ori	r24, 0x07	; 7
  ac:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0x7F;
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	8f 67       	ori	r24, 0x7F	; 127
  b2:	84 bb       	out	0x14, r24	; 20
  b4:	9e 01       	movw	r18, r28
  b6:	25 5f       	subi	r18, 0xF5	; 245
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  ba:	8e 01       	movw	r16, r28
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
  c0:	c0 2e       	mov	r12, r16
  c2:	d1 2e       	mov	r13, r17
		{
			for(int j=0; j<10; j++)	
			{
				for (int k=0; k<10; k++)
				{
					PORTB = (4<<0);
  c4:	74 e0       	ldi	r23, 0x04	; 4
					PORTC = segment[i];
					_delay_ms(100);
					PORTB &= (0<<0);
					_delay_ms(10);
					PORTB = (2<<0);
  c6:	62 e0       	ldi	r22, 0x02	; 2
					PORTC = segment[j];
					_delay_ms(100);
					PORTB &= (0<<0);
					_delay_ms(10);
					PORTB = (1<<0);
  c8:	91 e0       	ldi	r25, 0x01	; 1
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  ca:	e0 2e       	mov	r14, r16
  cc:	f1 2e       	mov	r15, r17
  ce:	a8 01       	movw	r20, r16
  d0:	51 c0       	rjmp	.+162    	; 0x174 <main+0xf2>
		{
			for(int j=0; j<10; j++)	
			{
				for (int k=0; k<10; k++)
				{
					PORTB = (4<<0);
  d2:	78 bb       	out	0x18, r23	; 24
					PORTC = segment[i];
  d4:	da 01       	movw	r26, r20
  d6:	8c 91       	ld	r24, X
  d8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	bf ef       	ldi	r27, 0xFF	; 255
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	a2 e0       	ldi	r26, 0x02	; 2
  e0:	b1 50       	subi	r27, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x68>
  ea:	00 00       	nop
					_delay_ms(100);
					PORTB &= (0<<0);
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	18 ba       	out	0x18, r1	; 24
  f0:	af e1       	ldi	r26, 0x1F	; 31
  f2:	be e4       	ldi	r27, 0x4E	; 78
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x72>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x78>
  fa:	00 00       	nop
					_delay_ms(10);
					PORTB = (2<<0);
  fc:	68 bb       	out	0x18, r22	; 24
					PORTC = segment[j];
  fe:	d5 01       	movw	r26, r10
 100:	8c 91       	ld	r24, X
 102:	85 bb       	out	0x15, r24	; 21
 104:	bf ef       	ldi	r27, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	a2 e0       	ldi	r26, 0x02	; 2
 10a:	b1 50       	subi	r27, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x88>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x92>
 114:	00 00       	nop
					_delay_ms(100);
					PORTB &= (0<<0);
 116:	88 b3       	in	r24, 0x18	; 24
 118:	18 ba       	out	0x18, r1	; 24
 11a:	af e1       	ldi	r26, 0x1F	; 31
 11c:	be e4       	ldi	r27, 0x4E	; 78
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x9c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa2>
 124:	00 00       	nop
					_delay_ms(10);
					PORTB = (1<<0);
 126:	98 bb       	out	0x18, r25	; 24
					PORTC = segment[k];
 128:	81 91       	ld	r24, Z+
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	bf ef       	ldi	r27, 0xFF	; 255
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	a2 e0       	ldi	r26, 0x02	; 2
 132:	b1 50       	subi	r27, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xb0>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xba>
 13c:	00 00       	nop
					_delay_ms(100);
					PORTB &= (0<<0);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	18 ba       	out	0x18, r1	; 24
 142:	af e1       	ldi	r26, 0x1F	; 31
 144:	be e4       	ldi	r27, 0x4E	; 78
 146:	11 97       	sbiw	r26, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xc4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xca>
 14c:	00 00       	nop
		
		for(int i =0; i<10; i++)
		{
			for(int j=0; j<10; j++)	
			{
				for (int k=0; k<10; k++)
 14e:	e2 17       	cp	r30, r18
 150:	f3 07       	cpc	r31, r19
 152:	09 f0       	breq	.+2      	; 0x156 <main+0xd4>
 154:	be cf       	rjmp	.-132    	; 0xd2 <main+0x50>
 156:	bf ef       	ldi	r27, 0xFF	; 255
 158:	ab 1a       	sub	r10, r27
 15a:	bb 0a       	sbc	r11, r27
		PORTB &= (0<<1);
		_delay_ms(1);*/
		
		for(int i =0; i<10; i++)
		{
			for(int j=0; j<10; j++)	
 15c:	2a 15       	cp	r18, r10
 15e:	3b 05       	cpc	r19, r11
 160:	19 f0       	breq	.+6      	; 0x168 <main+0xe6>
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
 162:	ee 2d       	mov	r30, r14
 164:	ff 2d       	mov	r31, r15
 166:	b5 cf       	rjmp	.-150    	; 0xd2 <main+0x50>
 168:	4f 5f       	subi	r20, 0xFF	; 255
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
		PORTB |= (2<<0);
		_delay_ms(500);
		PORTB &= (0<<1);
		_delay_ms(1);*/
		
		for(int i =0; i<10; i++)
 16c:	42 17       	cp	r20, r18
 16e:	53 07       	cpc	r21, r19
 170:	09 f4       	brne	.+2      	; 0x174 <main+0xf2>
 172:	ad cf       	rjmp	.-166    	; 0xce <main+0x4c>
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
 174:	ac 2c       	mov	r10, r12
 176:	bd 2c       	mov	r11, r13
 178:	f4 cf       	rjmp	.-24     	; 0x162 <main+0xe0>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
