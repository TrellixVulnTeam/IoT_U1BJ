
Blink_zinc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a6  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a6  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRC |= 0xff;
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 bb       	out	0x14, r24	; 20
	DDRA |= 0x7f;
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 67       	ori	r24, 0x7F	; 127
  a0:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0x7f;
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	8f 67       	ori	r24, 0x7F	; 127
  a6:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
	
char ablink[10]= {0x3f,0x06, 0x5b, 0x4f, 0x66,0x6d,0x7d,0x07,0xff, 0x6f};
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	e0 e6       	ldi	r30, 0x60	; 96
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
char bblink[10]= {0x3f,0x06, 0x5b, 0x4f, 0x66,0x6d,0x7d,0x07,0xff, 0x6f};	
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	1b 96       	adiw	r26, 0x0b	; 11
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x42>
  cc:	be 01       	movw	r22, r28
  ce:	65 5f       	subi	r22, 0xF5	; 245
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	ae 01       	movw	r20, r28
  d4:	4b 5e       	subi	r20, 0xEB	; 235
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
#define F_CPU 8000000UL
#include <util/delay.h>


int main(void)
{
  d8:	1a e0       	ldi	r17, 0x0A	; 10
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f6 2e       	mov	r15, r22
  de:	07 2f       	mov	r16, r23
  e0:	de 01       	movw	r26, r28
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	21 c0       	rjmp	.+66     	; 0x128 <main+0xa6>
		
		for (int i=0; i<10; i++)
		{
			for (int j=0; j<10; j++)
			{
				PORTA = ablink[i];
  e6:	2c 91       	ld	r18, X
  e8:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f8 e1       	ldi	r31, 0x18	; 24
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	e0 40       	sbci	r30, 0x00	; 0
  f4:	f0 40       	sbci	r31, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x6e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x78>
  fa:	00 00       	nop
  fc:	01 97       	sbiw	r24, 0x01	; 1
    while (1) 
    {
		
		for (int i=0; i<10; i++)
		{
			for (int j=0; j<10; j++)
  fe:	99 f7       	brne	.-26     	; 0xe6 <main+0x64>
 100:	ef 2d       	mov	r30, r15
 102:	f0 2f       	mov	r31, r16
				PORTA = ablink[i];
				_delay_ms(1000);
			}
			for (int j=0; j<10; j++)
			{
				PORTB = bblink[j];
 104:	81 91       	ld	r24, Z+
 106:	88 bb       	out	0x18, r24	; 24
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	80 e7       	ldi	r24, 0x70	; 112
 10c:	92 e0       	ldi	r25, 0x02	; 2
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x8c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x96>
 118:	00 00       	nop
			for (int j=0; j<10; j++)
			{
				PORTA = ablink[i];
				_delay_ms(1000);
			}
			for (int j=0; j<10; j++)
 11a:	e4 17       	cp	r30, r20
 11c:	f5 07       	cpc	r31, r21
 11e:	91 f7       	brne	.-28     	; 0x104 <main+0x82>
 120:	11 96       	adiw	r26, 0x01	; 1
char ablink[10]= {0x3f,0x06, 0x5b, 0x4f, 0x66,0x6d,0x7d,0x07,0xff, 0x6f};
char bblink[10]= {0x3f,0x06, 0x5b, 0x4f, 0x66,0x6d,0x7d,0x07,0xff, 0x6f};	
    while (1) 
    {
		
		for (int i=0; i<10; i++)
 122:	a6 17       	cp	r26, r22
 124:	b7 07       	cpc	r27, r23
 126:	e1 f2       	breq	.-72     	; 0xe0 <main+0x5e>
#define F_CPU 8000000UL
#include <util/delay.h>


int main(void)
{
 128:	81 2f       	mov	r24, r17
 12a:	93 2f       	mov	r25, r19
 12c:	dc cf       	rjmp	.-72     	; 0xe6 <main+0x64>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
