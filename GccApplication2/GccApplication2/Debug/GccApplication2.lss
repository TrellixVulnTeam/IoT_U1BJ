
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024c  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRC &= 0x00;
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	14 ba       	out	0x14, r1	; 20
	DDRB |= 0xff;
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	87 bb       	out	0x17, r24	; 23
		
		if(timestamp == 0x01)
		{
			for(int h=0; h<9; h++)
			{
				PORTB |=~ (255<<h);
  76:	6f ef       	ldi	r22, 0xFF	; 255
  78:	70 e0       	ldi	r23, 0x00	; 0
	while (1)
	{
		uint8_t timestamp = 0;
		timestamp = PINC & 0x01;
		
		if(timestamp == 0x01)
  7a:	98 9b       	sbis	0x13, 0	; 19
  7c:	fe cf       	rjmp	.-4      	; 0x7a <main+0xe>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(int h=0; h<9; h++)
			{
				PORTB |=~ (255<<h);
  82:	38 b3       	in	r19, 0x18	; 24
  84:	ab 01       	movw	r20, r22
  86:	08 2e       	mov	r0, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	44 0f       	add	r20, r20
  8c:	55 1f       	adc	r21, r21
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <main+0x1e>
  92:	24 2f       	mov	r18, r20
  94:	20 95       	com	r18
  96:	23 2b       	or	r18, r19
  98:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	32 e5       	ldi	r19, 0x52	; 82
  9e:	47 e0       	ldi	r20, 0x07	; 7
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
		uint8_t timestamp = 0;
		timestamp = PINC & 0x01;
		
		if(timestamp == 0x01)
		{
			for(int h=0; h<9; h++)
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	89 30       	cpi	r24, 0x09	; 9
  b0:	91 05       	cpc	r25, r1
  b2:	39 f7       	brne	.-50     	; 0x82 <main+0x16>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
				PORTB |=~ (255<<h);
				_delay_ms(300);
			}
				for(int i=0; i<8; i++)
				{
					if(i<7)
  b8:	87 30       	cpi	r24, 0x07	; 7
  ba:	91 05       	cpc	r25, r1
  bc:	b4 f4       	brge	.+44     	; 0xea <main+0x7e>
					{
						PORTB |= (255<<i);
  be:	48 b3       	in	r20, 0x18	; 24
  c0:	9b 01       	movw	r18, r22
  c2:	08 2e       	mov	r0, r24
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x5e>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x5a>
  ce:	24 2b       	or	r18, r20
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	5f ef       	ldi	r21, 0xFF	; 255
  d4:	e2 e5       	ldi	r30, 0x52	; 82
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	51 50       	subi	r21, 0x01	; 1
  da:	e0 40       	sbci	r30, 0x00	; 0
  dc:	20 40       	sbci	r18, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
						_delay_ms(300);
						PORTB &= (0<<0);
  e4:	28 b3       	in	r18, 0x18	; 24
  e6:	18 ba       	out	0x18, r1	; 24
  e8:	6d c0       	rjmp	.+218    	; 0x1c4 <main+0x158>
					}
					else
					{
						PORTB |= (255<<i);
  ea:	48 b3       	in	r20, 0x18	; 24
  ec:	9b 01       	movw	r18, r22
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x8a>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x86>
  fa:	24 2b       	or	r18, r20
  fc:	28 bb       	out	0x18, r18	; 24
  fe:	3f ef       	ldi	r19, 0xFF	; 255
 100:	42 e5       	ldi	r20, 0x52	; 82
 102:	57 e0       	ldi	r21, 0x07	; 7
 104:	31 50       	subi	r19, 0x01	; 1
 106:	40 40       	sbci	r20, 0x00	; 0
 108:	50 40       	sbci	r21, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x98>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0xa2>
 10e:	00 00       	nop
						_delay_ms(300);
						PORTB &= (0<<0);
 110:	28 b3       	in	r18, 0x18	; 24
 112:	18 ba       	out	0x18, r1	; 24
 114:	ef ef       	ldi	r30, 0xFF	; 255
 116:	22 e5       	ldi	r18, 0x52	; 82
 118:	37 e0       	ldi	r19, 0x07	; 7
 11a:	e1 50       	subi	r30, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0xae>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xb8>
 124:	00 00       	nop
						_delay_ms(300);
						
						for(int j=7; j>=0; j--)
 126:	27 e0       	ldi	r18, 0x07	; 7
 128:	30 e0       	ldi	r19, 0x00	; 0
						{
							
							PORTB |= (255<<j);
 12a:	e8 b3       	in	r30, 0x18	; 24
 12c:	ab 01       	movw	r20, r22
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0xca>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0xc6>
 13a:	4e 2b       	or	r20, r30
 13c:	48 bb       	out	0x18, r20	; 24
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	52 e5       	ldi	r21, 0x52	; 82
 142:	e7 e0       	ldi	r30, 0x07	; 7
 144:	41 50       	subi	r20, 0x01	; 1
 146:	50 40       	sbci	r21, 0x00	; 0
 148:	e0 40       	sbci	r30, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xd8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xe2>
 14e:	00 00       	nop
							_delay_ms(300);
							PORTB &= (0<<0);
 150:	48 b3       	in	r20, 0x18	; 24
 152:	18 ba       	out	0x18, r1	; 24
						PORTB |= (255<<i);
						_delay_ms(300);
						PORTB &= (0<<0);
						_delay_ms(300);
						
						for(int j=7; j>=0; j--)
 154:	21 50       	subi	r18, 0x01	; 1
 156:	31 09       	sbc	r19, r1
 158:	40 f7       	brcc	.-48     	; 0x12a <main+0xbe>
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
							_delay_ms(300);
							PORTB &= (0<<0);
						}
						for(int k=1; k<8; k++)
						{
							if(k<7)
 15e:	27 30       	cpi	r18, 0x07	; 7
 160:	31 05       	cpc	r19, r1
 162:	b4 f4       	brge	.+44     	; 0x190 <main+0x124>
							{
								PORTB |= (255>>k);
 164:	e8 b3       	in	r30, 0x18	; 24
 166:	ab 01       	movw	r20, r22
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0x104>
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <main+0x100>
 174:	4e 2b       	or	r20, r30
 176:	48 bb       	out	0x18, r20	; 24
 178:	5f ef       	ldi	r21, 0xFF	; 255
 17a:	e2 e5       	ldi	r30, 0x52	; 82
 17c:	47 e0       	ldi	r20, 0x07	; 7
 17e:	51 50       	subi	r21, 0x01	; 1
 180:	e0 40       	sbci	r30, 0x00	; 0
 182:	40 40       	sbci	r20, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x112>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x11c>
 188:	00 00       	nop
								_delay_ms(300);
								PORTB &= (0>>0);
 18a:	48 b3       	in	r20, 0x18	; 24
 18c:	18 ba       	out	0x18, r1	; 24
 18e:	15 c0       	rjmp	.+42     	; 0x1ba <main+0x14e>
							}
							else
							{
								PORTB |= (255>>k);
 190:	e8 b3       	in	r30, 0x18	; 24
 192:	ab 01       	movw	r20, r22
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <main+0x130>
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <main+0x12c>
 1a0:	4e 2b       	or	r20, r30
 1a2:	48 bb       	out	0x18, r20	; 24
 1a4:	5f ef       	ldi	r21, 0xFF	; 255
 1a6:	e2 e5       	ldi	r30, 0x52	; 82
 1a8:	47 e0       	ldi	r20, 0x07	; 7
 1aa:	51 50       	subi	r21, 0x01	; 1
 1ac:	e0 40       	sbci	r30, 0x00	; 0
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x13e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x148>
 1b4:	00 00       	nop
								_delay_ms(300);
								PORTB &= (0>>0);
 1b6:	48 b3       	in	r20, 0x18	; 24
 1b8:	18 ba       	out	0x18, r1	; 24
							
							PORTB |= (255<<j);
							_delay_ms(300);
							PORTB &= (0<<0);
						}
						for(int k=1; k<8; k++)
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	28 30       	cpi	r18, 0x08	; 8
 1c0:	31 05       	cpc	r19, r1
 1c2:	69 f6       	brne	.-102    	; 0x15e <main+0xf2>
			for(int h=0; h<9; h++)
			{
				PORTB |=~ (255<<h);
				_delay_ms(300);
			}
				for(int i=0; i<8; i++)
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	91 05       	cpc	r25, r1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <main+0x162>
 1cc:	75 cf       	rjmp	.-278    	; 0xb8 <main+0x4c>
 1ce:	55 cf       	rjmp	.-342    	; 0x7a <main+0xe>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
